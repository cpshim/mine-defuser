# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rover_pb2 as rover__pb2


class RoverGuideStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMap = channel.unary_stream(
                '/rover.RoverGuide/GetMap',
                request_serializer=rover__pb2.MapRequest.SerializeToString,
                response_deserializer=rover__pb2.MapReply.FromString,
                )
        self.GetCommands = channel.unary_stream(
                '/rover.RoverGuide/GetCommands',
                request_serializer=rover__pb2.CommandsRequest.SerializeToString,
                response_deserializer=rover__pb2.CommandsReply.FromString,
                )
        self.GetMineNum = channel.unary_unary(
                '/rover.RoverGuide/GetMineNum',
                request_serializer=rover__pb2.MineNumRequest.SerializeToString,
                response_deserializer=rover__pb2.MineNumReply.FromString,
                )
        self.Success = channel.unary_unary(
                '/rover.RoverGuide/Success',
                request_serializer=rover__pb2.SuccessRequest.SerializeToString,
                response_deserializer=rover__pb2.SuccessReply.FromString,
                )
        self.SharePIN = channel.unary_unary(
                '/rover.RoverGuide/SharePIN',
                request_serializer=rover__pb2.ShareRequest.SerializeToString,
                response_deserializer=rover__pb2.ShareReply.FromString,
                )


class RoverGuideServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommands(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMineNum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Success(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SharePIN(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoverGuideServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMap': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMap,
                    request_deserializer=rover__pb2.MapRequest.FromString,
                    response_serializer=rover__pb2.MapReply.SerializeToString,
            ),
            'GetCommands': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCommands,
                    request_deserializer=rover__pb2.CommandsRequest.FromString,
                    response_serializer=rover__pb2.CommandsReply.SerializeToString,
            ),
            'GetMineNum': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMineNum,
                    request_deserializer=rover__pb2.MineNumRequest.FromString,
                    response_serializer=rover__pb2.MineNumReply.SerializeToString,
            ),
            'Success': grpc.unary_unary_rpc_method_handler(
                    servicer.Success,
                    request_deserializer=rover__pb2.SuccessRequest.FromString,
                    response_serializer=rover__pb2.SuccessReply.SerializeToString,
            ),
            'SharePIN': grpc.unary_unary_rpc_method_handler(
                    servicer.SharePIN,
                    request_deserializer=rover__pb2.ShareRequest.FromString,
                    response_serializer=rover__pb2.ShareReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rover.RoverGuide', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RoverGuide(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rover.RoverGuide/GetMap',
            rover__pb2.MapRequest.SerializeToString,
            rover__pb2.MapReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCommands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rover.RoverGuide/GetCommands',
            rover__pb2.CommandsRequest.SerializeToString,
            rover__pb2.CommandsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMineNum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rover.RoverGuide/GetMineNum',
            rover__pb2.MineNumRequest.SerializeToString,
            rover__pb2.MineNumReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Success(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rover.RoverGuide/Success',
            rover__pb2.SuccessRequest.SerializeToString,
            rover__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SharePIN(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rover.RoverGuide/SharePIN',
            rover__pb2.ShareRequest.SerializeToString,
            rover__pb2.ShareReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
